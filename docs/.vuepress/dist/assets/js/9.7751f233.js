(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{388:function(t,s,a){"use strict";a.r(s);var n=a(51),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"intersectionobserver-api-使用教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserver-api-使用教程"}},[t._v("#")]),t._v(" IntersectionObserver API 使用教程")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("用途")]),t._v(" "),a("p",[t._v('网页开发时，常常需要了解某个元素是否进入了"视口"（viewport），即用户能不能看到它。')])]),t._v(" "),a("h3",{attrs:{id:"简单使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单使用"}},[t._v("#")]),t._v(" 简单使用")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" io "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" option"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始观察")]),t._v("\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 停止观察")]),t._v("\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unobserve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭观察器")]),t._v("\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("disconnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("查看详情 "),a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("IntersectionObserver"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"git-git-流水线技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-git-流水线技巧"}},[t._v("#")]),t._v(" GIT git 流水线技巧")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("git stash   （将自己分支修改的内容暂存起来）\ngit checkout "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("分支名")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("一般切换到主分支"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngit pull origin "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("分支名")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("一般拉取最新的主分支代码"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngit checkout 自己分支名    （再切换到自己分支）\ngit merge 主分支名      （将主分支合并到自己分支，有冲突解决冲突）\ngit stash "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("将自己改的暂存的内容放出来"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("有冲突解决冲突"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngit add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("缓存代码"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'修改说明'")]),t._v("   （修改记录日志）\ngit push origin 自己分支名  （将自己分支提交到git仓库）\ngit merge –abort 可以停止合并\ngit log 查看历史提交\n\ngit branch 创建新分支\n没有参数时 git branch 会列出你在本地的分支 \n我们也可以使用 git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branchname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。\n\n删除分支命令：\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branchname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"git-如何退出-vim-编辑器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-如何退出-vim-编辑器"}},[t._v("#")]),t._v(" git 如何退出 VIM 编辑器")]),t._v(" "),a("p",[t._v("按下esc")]),t._v(" "),a("p",[t._v("接着 q! 回车 :表示不保存退出")]),t._v(" "),a("p",[t._v("或wq! 回车 表示保存并退出")]),t._v(" "),a("p",[t._v("git log 按 q退出")]),t._v(" "),a("h2",{attrs:{id:"github-创建个人访问令牌"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github-创建个人访问令牌"}},[t._v("#")]),t._v(" github 创建个人访问令牌")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("介绍")]),t._v(" "),a("p",[t._v("github 已不再支持密码做验证登录 需要自己创建个人访问令牌做权限管理和分配")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("令牌一定要记得复制保存 处于安全考虑 当你退出当前令牌生成页面之后你将看不到令牌代码")])]),t._v(" "),a("ol",[a("li",[t._v("点击个人中心头像 选择 Developer settings（开发人员设置）")]),t._v(" "),a("li",[t._v("选择 Personal access tokens （个人访问令牌）")]),t._v(" "),a("li",[t._v("点击 Generate new tokne （设置新的访问令牌）")]),t._v(" "),a("li",[t._v("选择权限分配完成之后点击Generate tokne（生成令牌）")]),t._v(" "),a("li",[t._v("拿到令牌 复制保存")]),t._v(" "),a("li",[t._v("使用令牌 正常连接github会给你调起登录框 密码框中不在输入密码输入令牌即可")])])])}),[],!1,null,null,null);s.default=e.exports}}]);